{
  "openapi": "3.0.1",
  "info": {
    "title": "Adventure Builder API",
    "description": "An API for retrieving levels, leaderboards, assets, and user information in the Adventure Builder game.",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://api.adventure-builder.net"
    }
  ],
  "security": [],
  "paths": {
    "/v1/level/{level-id}": {
      "get": {
        "description": "Returns the data of a specific level by its level-id.",
        "parameters": [
          {
            "name": "level-id",
            "in": "path",
            "description": "The ID of the level.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Level response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Level"
                }
              }
            }
          },
          "404": {
            "description": "Level not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leaderboard/{level-id}": {
      "get": {
        "description": "Returns the leaderboard entries for a specific level.",
        "parameters": [
          {
            "name": "level-id",
            "in": "path",
            "description": "The ID of the level.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 30,
              "maximum": 30
            }
          },
          {
            "name": "userIds",
            "in": "query",
            "description": "Filter by an array of user IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leaderboard entries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaderboardEntry"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid limit parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "No leaderboard entries found for this level",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/assets": {
      "servers": [
        {
          "url": "https://thumbnails.roblox.com"
        }
      ],
      "get": {
        "description": "Returns the images for given thumbnail IDs.",
        "parameters": [
          {
            "name": "assetIds",
            "in": "query",
            "description": "The IDs of the thumbnails.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the thumbnail.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "30x30",
                "42x42",
                "50x50",
                "60x62",
                "75x75",
                "110x110",
                "140x140",
                "150x150",
                "160x100",
                "160x600",
                "250x250",
                "256x144",
                "300x250",
                "304x166",
                "384x216",
                "396x216",
                "420x420",
                "480x270",
                "512x512",
                "576x324",
                "700x700",
                "728x90",
                "768x432",
                "1200x80"
              ]
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "The format of the thumbnail.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Png",
                "Jpeg",
                "Webp"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Asset thumbnail response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetThumbnail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user-id}": {
      "servers": [
        {
          "url": "https://users.roblox.com"
        }
      ],
      "get": {
        "description": "Returns information about a specific Roblox user.",
        "parameters": [
          {
            "name": "user-id",
            "in": "path",
            "description": "The ID of the user.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User information response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Level": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "The unique ID of the level.",
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "description": "The title of the level.",
            "type": "string"
          },
          "builder": {
            "description": "The ID of the builder who created the level.",
            "type": "integer",
            "format": "int32"
          },
          "thumbnail": {
            "description": "The thumbnail ID of the level.",
            "type": "integer",
            "format": "int64"
          },
          "plays": {
            "description": "The number of times the level has been played.",
            "type": "integer",
            "format": "int32"
          },
          "featured": {
            "description": "Whether the level is featured.",
            "type": "boolean"
          }
        }
      },
      "LeaderboardEntry": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The unique ID of the leaderboard entry.",
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "description": "The ID of the user who created this entry.",
            "type": "integer",
            "format": "int32"
          },
          "time": {
            "description": "The completion time for this entry.",
            "type": "number",
            "format": "float"
          },
          "created_at": {
            "description": "The timestamp when this entry was created.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AssetThumbnail": {
        "type": "object",
        "properties": {
          "targetId": {
            "type": "integer",
            "format": "int64"
          },
          "state": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          }
        }
      },
      "UserInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The user's user ID."
          },
          "displayName": {
            "type": "string",
            "description": "The user's display name."
          },
          "name": {
            "type": "string",
            "description": "The user's username."
          },
          "description": {
            "type": "string",
            "description": "The user's description."
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "When the user's profile was created."
          },
          "hasVerifiedBadge": {
            "type": "boolean",
            "description": "Whether the user has the verified badge."
          },
          "isBanned": {
            "type": "boolean",
            "description": "Whether the user is banned."
          },
          "externalAppDisplayName": {
            "type": "string",
            "description": "I've got no idea what this does, sorry."
          }
        }
      },
      "Error": {
        "required": [
          "error",
          "message"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
